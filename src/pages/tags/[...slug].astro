---
import { getCollection } from 'astro:content';
import { generateSlug } from '../../utils';
import BaseLayout from '../../layouts/BaseLayout.astro';

const recipes = await getCollection('recipes');
const tags = recipes
  .map((recipe) => recipe.data.tags)
  .flat()
  .reduce<{ [key: string]: number }>(function (result, curr) {
    let count = result[curr] || 0;
    result[curr] = count + 1;
    return result;
  }, {});

console.log(tags);

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

const allRecipesWithTags = await getCollection('recipes', (recipe) =>
  recipe.data.tags.some((tag) => generateSlug(tag) === slug)
);

if (allRecipesWithTags.length === 0) {
  Astro.redirect('/404');
}

export const prerender = true;

export async function getStaticPaths() {
  const recipes = await getCollection('recipes');
  return [...new Set(recipes.map((recipe) => recipe.data.tags).flat())].map(
    (tag) => ({
      params: {
        slug: generateSlug(tag),
      },
    })
  );
}
const tag = Object.keys(tags).find((tag) => generateSlug(tag) === slug);
console.log({ slug, tag });
---

<BaseLayout>
  <h1>All posts about: {tag}</h1>
  {
    allRecipesWithTags.map((recipe) => (
      <article>
        <h2>{recipe.data.title}</h2>
      </article>
    ))
  }
</BaseLayout>
